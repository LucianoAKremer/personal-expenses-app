<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/LucianoAKremer/personal_expenses_app/data/Category/CategoryDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/LucianoAKremer/personal_expenses_app/data/Category/CategoryDao.kt" />
              <option name="originalContent" value="package com.LucianoAKremer.personal_expenses_app.data&#10;&#10;import androidx.room.Dao&#10;import androidx.room.Delete&#10;import androidx.room.Insert&#10;import androidx.room.OnConflictStrategy&#10;import androidx.room.Query&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;@Dao&#10;interface CategoryDao {&#10;    @Insert(onConflict = OnConflictStrategy.IGNORE) // Ignorar si la categoría ya existe (por nombre)&#10;    suspend fun insert(category: Category)&#10;&#10;    @Delete&#10;    suspend fun delete(category: Category)&#10;&#10;    @Query(&quot;DELETE FROM categories WHERE id = :id&quot;)&#10;    suspend fun deleteById(id: Int)&#10;&#10;    @Query(&quot;SELECT * FROM categories ORDER BY name ASC&quot;)&#10;    fun getAllCategories(): Flow&lt;List&lt;Category&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM categories WHERE name = :name LIMIT 1&quot;)&#10;    suspend fun getCategoryByName(name: String): Category?&#10;}" />
              <option name="updatedContent" value="package com.LucianoAKremer.personal_expenses_app.data&#10;&#10;import androidx.room.Dao&#10;import androidx.room.Delete&#10;import androidx.room.Insert&#10;import androidx.room.OnConflictStrategy&#10;import androidx.room.Query&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;@Dao&#10;interface CategoryDao {&#10;    @Insert(onConflict = OnConflictStrategy.IGNORE) // Ignorar si la categoría ya existe (por nombre)&#10;    suspend fun insert(category: Category)&#10;&#10;    @Delete&#10;    suspend fun delete(category: Category)&#10;&#10;    @Query(&quot;DELETE FROM categories WHERE id = :id&quot;)&#10;    suspend fun deleteById(id: Int)&#10;&#10;    @Query(&quot;SELECT * FROM categories ORDER BY name ASC&quot;)&#10;    fun getAllCategories(): Flow&lt;List&lt;Category&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM categories WHERE name = :name LIMIT 1&quot;)&#10;    suspend fun getCategoryByName(name: String): Category?&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/LucianoAKremer/personal_expenses_app/ui/Expenses/DeleteExpenseDialog.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/LucianoAKremer/personal_expenses_app/ui/Expenses/DeleteExpenseDialog.kt" />
              <option name="originalContent" value="package com.LucianoAKremer.personal_expenses_app.ui.Expenses&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.selection.selectable&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.RadioButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import com.LucianoAKremer.personal_expenses_app.data.Expense&#10;import com.LucianoAKremer.personal_expenses_app.viewmodel.ExpenseViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun DeleteExpenseDialog(&#10;    viewModel: ExpenseViewModel,&#10;    onDismiss: () -&gt; Unit,&#10;    expenseToDelete: com.LucianoAKremer.personal_expenses_app.data.Expense?&#10;) {&#10;    val dateFormat = remember { SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()) }&#10;    if (expenseToDelete == null) {&#10;        onDismiss()&#10;        return&#10;    }&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { Text(&quot;Eliminar Gasto&quot;) },&#10;        text = {&#10;            Text(&#10;                text = &quot;¿Seguro que deseas eliminar el gasto de ${expenseToDelete.amount} - ${expenseToDelete.note ?: &quot;Sin nota&quot;} - ${dateFormat.format(expenseToDelete.date)}?&quot;&#10;            )&#10;        },&#10;        confirmButton = {&#10;            TextButton(&#10;                onClick = {&#10;                    viewModel.deleteExpense(expenseToDelete)&#10;                    onDismiss()&#10;                }&#10;            ) {&#10;                Text(&quot;Eliminar&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) { Text(&quot;Cancelar&quot;) }&#10;        }&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.LucianoAKremer.personal_expenses_app.ui.Expenses&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.selection.selectable&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.RadioButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import com.LucianoAKremer.personal_expenses_app.data.Expense&#10;import com.LucianoAKremer.personal_expenses_app.viewmodel.ExpenseViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun DeleteExpenseDialog(&#10;    viewModel: ExpenseViewModel,&#10;    onDismiss: () -&gt; Unit,&#10;    expenseToDelete: com.LucianoAKremer.personal_expenses_app.data.Expense?&#10;) {&#10;    val dateFormat = remember { SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault()) }&#10;    if (expenseToDelete == null) {&#10;        onDismiss()&#10;        return&#10;    }&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { Text(&quot;Eliminar Gasto&quot;) },&#10;        text = {&#10;            Text(&#10;                text = &quot;¿Seguro que deseas eliminar el gasto de ${expenseToDelete.amount} - ${expenseToDelete.note ?: &quot;Sin nota&quot;} - ${dateFormat.format(expenseToDelete.date)}?&quot;&#10;            )&#10;        },&#10;        confirmButton = {&#10;            TextButton(&#10;                onClick = {&#10;                    viewModel.deleteExpense(expenseToDelete)&#10;                    onDismiss()&#10;                }&#10;            ) {&#10;                Text(&quot;Eliminar&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) { Text(&quot;Cancelar&quot;) }&#10;        }&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/LucianoAKremer/personal_expenses_app/ui/Expenses/ExpenseItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/LucianoAKremer/personal_expenses_app/ui/Expenses/ExpenseItem.kt" />
              <option name="originalContent" value="package com.LucianoAKremer.personal_expenses_app.ui&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import com.LucianoAKremer.personal_expenses_app.data.Category // Importa Category&#10;import com.LucianoAKremer.personal_expenses_app.data.Expense&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun ExpenseItem(expense: Expense, category: Category?, modifier: Modifier = Modifier) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp, horizontal = 8.dp), // Ajusta padding&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp) // Sutil elevación&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .padding(16.dp)&#10;                .fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = category?.name ?: &quot;Sin Categoría&quot;, // Muestra el nombre de la categoría&#10;                    style = MaterialTheme.typography.titleMedium&#10;                )&#10;                expense.note?.let {&#10;                    Text(&#10;                        text = it,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = Color.Gray&#10;                    )&#10;                }&#10;            }&#10;            Column(horizontalAlignment = androidx.compose.ui.Alignment.End) {&#10;                Text(&#10;                    text = &quot;$${&quot;%.2f&quot;.format(expense.amount)}&quot;, // Formatea el monto&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;                val dateFormat = SimpleDateFormat(&quot;dd/MM/yy&quot;, Locale.getDefault()) // Formato más corto&#10;                Text(                        text = dateFormat.format(expense.date),&#10;                    style = MaterialTheme.typography.bodySmall&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.LucianoAKremer.personal_expenses_app.ui&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import com.LucianoAKremer.personal_expenses_app.data.Category // Importa Category&#10;import com.LucianoAKremer.personal_expenses_app.data.Expense&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun ExpenseItem(expense: Expense, category: Category?, modifier: Modifier = Modifier) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp, horizontal = 8.dp), // Ajusta padding&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp) // Sutil elevación&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .padding(16.dp)&#10;                .fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = category?.name ?: &quot;Sin Categoría&quot;, // Muestra el nombre de la categoría&#10;                    style = MaterialTheme.typography.titleMedium&#10;                )&#10;                expense.note?.let {&#10;                    Text(&#10;                        text = it,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = Color.Gray&#10;                    )&#10;                }&#10;            }&#10;            Column(horizontalAlignment = androidx.compose.ui.Alignment.End) {&#10;                Text(&#10;                    text = &quot;$${&quot;%.2f&quot;.format(expense.amount)}&quot;, // Formatea el monto&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;                val dateFormat = SimpleDateFormat(&quot;dd/MM/yy&quot;, Locale.getDefault()) // Formato más corto&#10;                Text(                        text = dateFormat.format(expense.date),&#10;                    style = MaterialTheme.typography.bodySmall&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/LucianoAKremer/personal_expenses_app/viewmodel/ExpenseViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/LucianoAKremer/personal_expenses_app/viewmodel/ExpenseViewModel.kt" />
              <option name="originalContent" value="package com.LucianoAKremer.personal_expenses_app.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.LucianoAKremer.personal_expenses_app.data.Category // Importa Category&#10;import com.LucianoAKremer.personal_expenses_app.data.Expense&#10;import com.LucianoAKremer.personal_expenses_app.repository.ExpenseRepository&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.map&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;&#10;class ExpenseViewModel(private val repository: ExpenseRepository) : ViewModel() {&#10;&#10;    val allExpenses: StateFlow&lt;List&lt;Expense&gt;&gt; = repository.allExpenses&#10;        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())&#10;&#10;    val totalExpenses: StateFlow&lt;Double&gt; = repository.totalExpenses&#10;        .map { it ?: 0.0 }&#10;        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), 0.0)&#10;&#10;    // Flujo para categorías&#10;    val categories: StateFlow&lt;List&lt;Category&gt;&gt; = repository.allCategories&#10;        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())&#10;&#10;    fun addExpense(expense: Expense) {&#10;        viewModelScope.launch {&#10;            repository.insert(expense)&#10;        }&#10;    }&#10;&#10;    fun deleteExpense(expense: Expense) {&#10;        viewModelScope.launch {&#10;            repository.delete(expense)&#10;        }&#10;    }&#10;&#10;    fun addCategory(categoryName: String) {&#10;        viewModelScope.launch {&#10;            if (categoryName.isNotBlank()) {&#10;                // Opcional: Verificar si la categoría ya existe para evitar duplicados por nombre&#10;                val existingCategory = repository.getCategoryByName(categoryName)&#10;                if (existingCategory == null) {&#10;                    repository.insertCategory(Category(name = categoryName))&#10;                } else {&#10;                    // Manejar el caso de categoría duplicada (ej: mostrar un mensaje)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteCategory(category: Category) {&#10;        viewModelScope.launch {&#10;            repository.deleteCategory(category)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.LucianoAKremer.personal_expenses_app.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.LucianoAKremer.personal_expenses_app.data.Category // Importa Category&#10;import com.LucianoAKremer.personal_expenses_app.data.Expense&#10;import com.LucianoAKremer.personal_expenses_app.repository.ExpenseRepository&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.map&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;&#10;class ExpenseViewModel(private val repository: ExpenseRepository) : ViewModel() {&#10;&#10;    val allExpenses: StateFlow&lt;List&lt;Expense&gt;&gt; = repository.allExpenses&#10;        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())&#10;&#10;    val totalExpenses: StateFlow&lt;Double&gt; = repository.totalExpenses&#10;        .map { it ?: 0.0 }&#10;        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), 0.0)&#10;&#10;    // Flujo para categorías&#10;    val categories: StateFlow&lt;List&lt;Category&gt;&gt; = repository.allCategories&#10;        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())&#10;&#10;    fun addExpense(expense: Expense) {&#10;        viewModelScope.launch {&#10;            repository.insert(expense)&#10;        }&#10;    }&#10;&#10;    fun deleteExpense(expense: Expense) {&#10;        viewModelScope.launch {&#10;            repository.delete(expense)&#10;        }&#10;    }&#10;&#10;    fun addCategory(categoryName: String) {&#10;        viewModelScope.launch {&#10;            if (categoryName.isNotBlank()) {&#10;                // Opcional: Verificar si la categoría ya existe para evitar duplicados por nombre&#10;                val existingCategory = repository.getCategoryByName(categoryName)&#10;                if (existingCategory == null) {&#10;                    repository.insertCategory(Category(name = categoryName))&#10;                } else {&#10;                    // Manejar el caso de categoría duplicada (ej: mostrar un mensaje)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun deleteCategory(category: Category) {&#10;        viewModelScope.launch {&#10;            repository.deleteCategory(category)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>